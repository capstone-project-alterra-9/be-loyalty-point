// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entity "capstone-project/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockSvc is a mock of Svc interface.
type MockSvc struct {
	ctrl     *gomock.Controller
	recorder *MockSvcMockRecorder
}

// MockSvcMockRecorder is the mock recorder for MockSvc.
type MockSvcMockRecorder struct {
	mock *MockSvc
}

// NewMockSvc creates a new mock instance.
func NewMockSvc(ctrl *gomock.Controller) *MockSvc {
	mock := &MockSvc{ctrl: ctrl}
	mock.recorder = &MockSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSvc) EXPECT() *MockSvcMockRecorder {
	return m.recorder
}

// CreateMidtransTransaction mocks base method.
func (m *MockSvc) CreateMidtransTransaction(c echo.Context, transaction entity.MidtransTransactionBinding) (*entity.MidtransTransactionView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMidtransTransaction", c, transaction)
	ret0, _ := ret[0].(*entity.MidtransTransactionView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMidtransTransaction indicates an expected call of CreateMidtransTransaction.
func (mr *MockSvcMockRecorder) CreateMidtransTransaction(c, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMidtransTransaction", reflect.TypeOf((*MockSvc)(nil).CreateMidtransTransaction), c, transaction)
}

// CreateProduct mocks base method.
func (m *MockSvc) CreateProduct(c echo.Context, product *entity.Products) (*entity.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", c, product)
	ret0, _ := ret[0].(*entity.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockSvcMockRecorder) CreateProduct(c, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockSvc)(nil).CreateProduct), c, product)
}

// CreateTransactionByAdmin mocks base method.
func (m *MockSvc) CreateTransactionByAdmin(c echo.Context, transaction entity.Transactions) (*entity.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransactionByAdmin", c, transaction)
	ret0, _ := ret[0].(*entity.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransactionByAdmin indicates an expected call of CreateTransactionByAdmin.
func (mr *MockSvcMockRecorder) CreateTransactionByAdmin(c, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransactionByAdmin", reflect.TypeOf((*MockSvc)(nil).CreateTransactionByAdmin), c, transaction)
}

// CreateTransactionByUser mocks base method.
func (m *MockSvc) CreateTransactionByUser(c echo.Context, transaction entity.TransactionsBinding) (*entity.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransactionByUser", c, transaction)
	ret0, _ := ret[0].(*entity.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransactionByUser indicates an expected call of CreateTransactionByUser.
func (mr *MockSvcMockRecorder) CreateTransactionByUser(c, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransactionByUser", reflect.TypeOf((*MockSvc)(nil).CreateTransactionByUser), c, transaction)
}

// CreateUserByAdmin mocks base method.
func (m *MockSvc) CreateUserByAdmin(c echo.Context, user entity.CreateUserBinding) (*entity.CreateUserView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserByAdmin", c, user)
	ret0, _ := ret[0].(*entity.CreateUserView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserByAdmin indicates an expected call of CreateUserByAdmin.
func (mr *MockSvcMockRecorder) CreateUserByAdmin(c, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserByAdmin", reflect.TypeOf((*MockSvc)(nil).CreateUserByAdmin), c, user)
}

// DeleteOneById mocks base method.
func (m *MockSvc) DeleteOneById(c echo.Context, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneById", c, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneById indicates an expected call of DeleteOneById.
func (mr *MockSvcMockRecorder) DeleteOneById(c, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneById", reflect.TypeOf((*MockSvc)(nil).DeleteOneById), c, userId)
}

// DeleteProduct mocks base method.
func (m *MockSvc) DeleteProduct(c echo.Context, ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", c, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockSvcMockRecorder) DeleteProduct(c, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockSvc)(nil).DeleteProduct), c, ID)
}

// DeleteTransactionByAdmin mocks base method.
func (m *MockSvc) DeleteTransactionByAdmin(c echo.Context, transactionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransactionByAdmin", c, transactionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransactionByAdmin indicates an expected call of DeleteTransactionByAdmin.
func (mr *MockSvcMockRecorder) DeleteTransactionByAdmin(c, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransactionByAdmin", reflect.TypeOf((*MockSvc)(nil).DeleteTransactionByAdmin), c, transactionID)
}

// GetCountTransactions mocks base method.
func (m *MockSvc) GetCountTransactions(c echo.Context) (*entity.GetTransactionsCountView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountTransactions", c)
	ret0, _ := ret[0].(*entity.GetTransactionsCountView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountTransactions indicates an expected call of GetCountTransactions.
func (mr *MockSvcMockRecorder) GetCountTransactions(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountTransactions", reflect.TypeOf((*MockSvc)(nil).GetCountTransactions), c)
}

// GetCountUsers mocks base method.
func (m *MockSvc) GetCountUsers(c echo.Context) (*entity.GetUserCountView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountUsers", c)
	ret0, _ := ret[0].(*entity.GetUserCountView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountUsers indicates an expected call of GetCountUsers.
func (mr *MockSvcMockRecorder) GetCountUsers(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountUsers", reflect.TypeOf((*MockSvc)(nil).GetCountUsers), c)
}

// GetHistory mocks base method.
func (m *MockSvc) GetHistory(c echo.Context) ([]entity.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", c)
	ret0, _ := ret[0].([]entity.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MockSvcMockRecorder) GetHistory(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MockSvc)(nil).GetHistory), c)
}

// GetHistoryByMethod mocks base method.
func (m *MockSvc) GetHistoryByMethod(c echo.Context, method string) ([]entity.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryByMethod", c, method)
	ret0, _ := ret[0].([]entity.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryByMethod indicates an expected call of GetHistoryByMethod.
func (mr *MockSvcMockRecorder) GetHistoryByMethod(c, method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryByMethod", reflect.TypeOf((*MockSvc)(nil).GetHistoryByMethod), c, method)
}

// GetHistoryByMethodCategory mocks base method.
func (m *MockSvc) GetHistoryByMethodCategory(c echo.Context, method, category string) ([]entity.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryByMethodCategory", c, method, category)
	ret0, _ := ret[0].([]entity.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryByMethodCategory indicates an expected call of GetHistoryByMethodCategory.
func (mr *MockSvcMockRecorder) GetHistoryByMethodCategory(c, method, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryByMethodCategory", reflect.TypeOf((*MockSvc)(nil).GetHistoryByMethodCategory), c, method, category)
}

// GetProductByID mocks base method.
func (m *MockSvc) GetProductByID(c echo.Context, ID string) (*entity.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", c, ID)
	ret0, _ := ret[0].(*entity.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockSvcMockRecorder) GetProductByID(c, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockSvc)(nil).GetProductByID), c, ID)
}

// GetProducts mocks base method.
func (m *MockSvc) GetProducts(c echo.Context) ([]entity.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", c)
	ret0, _ := ret[0].([]entity.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockSvcMockRecorder) GetProducts(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockSvc)(nil).GetProducts), c)
}

// GetProductsByCategory mocks base method.
func (m *MockSvc) GetProductsByCategory(c echo.Context, category string) ([]entity.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByCategory", c, category)
	ret0, _ := ret[0].([]entity.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByCategory indicates an expected call of GetProductsByCategory.
func (mr *MockSvcMockRecorder) GetProductsByCategory(c, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByCategory", reflect.TypeOf((*MockSvc)(nil).GetProductsByCategory), c, category)
}

// GetProductsByMethod mocks base method.
func (m *MockSvc) GetProductsByMethod(c echo.Context, paymentMethod string) ([]entity.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByMethod", c, paymentMethod)
	ret0, _ := ret[0].([]entity.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByMethod indicates an expected call of GetProductsByMethod.
func (mr *MockSvcMockRecorder) GetProductsByMethod(c, paymentMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByMethod", reflect.TypeOf((*MockSvc)(nil).GetProductsByMethod), c, paymentMethod)
}

// GetTransactionByID mocks base method.
func (m *MockSvc) GetTransactionByID(c echo.Context, ID string) (*entity.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", c, ID)
	ret0, _ := ret[0].(*entity.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MockSvcMockRecorder) GetTransactionByID(c, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MockSvc)(nil).GetTransactionByID), c, ID)
}

// GetTransactions mocks base method.
func (m *MockSvc) GetTransactions(c echo.Context) ([]entity.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", c)
	ret0, _ := ret[0].([]entity.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockSvcMockRecorder) GetTransactions(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockSvc)(nil).GetTransactions), c)
}

// GetTransactionsByMethod mocks base method.
func (m *MockSvc) GetTransactionsByMethod(c echo.Context, method string) ([]entity.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByMethod", c, method)
	ret0, _ := ret[0].([]entity.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByMethod indicates an expected call of GetTransactionsByMethod.
func (mr *MockSvcMockRecorder) GetTransactionsByMethod(c, method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByMethod", reflect.TypeOf((*MockSvc)(nil).GetTransactionsByMethod), c, method)
}

// GetUserById mocks base method.
func (m *MockSvc) GetUserById(c echo.Context, ID string) (*entity.UsersView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", c, ID)
	ret0, _ := ret[0].(*entity.UsersView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockSvcMockRecorder) GetUserById(c, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockSvc)(nil).GetUserById), c, ID)
}

// GetUsersPagination mocks base method.
func (m *MockSvc) GetUsersPagination(c echo.Context) ([]entity.UsersView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersPagination", c)
	ret0, _ := ret[0].([]entity.UsersView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersPagination indicates an expected call of GetUsersPagination.
func (mr *MockSvcMockRecorder) GetUsersPagination(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersPagination", reflect.TypeOf((*MockSvc)(nil).GetUsersPagination), c)
}

// Login mocks base method.
func (m *MockSvc) Login(c echo.Context, user entity.LoginBinding) (*entity.LoginView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", c, user)
	ret0, _ := ret[0].(*entity.LoginView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockSvcMockRecorder) Login(c, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockSvc)(nil).Login), c, user)
}

// ReGenerateToken mocks base method.
func (m *MockSvc) ReGenerateToken(c echo.Context, refreshToken entity.TokenBinding) (*entity.RefreshTokenView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReGenerateToken", c, refreshToken)
	ret0, _ := ret[0].(*entity.RefreshTokenView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReGenerateToken indicates an expected call of ReGenerateToken.
func (mr *MockSvcMockRecorder) ReGenerateToken(c, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReGenerateToken", reflect.TypeOf((*MockSvc)(nil).ReGenerateToken), c, refreshToken)
}

// Register mocks base method.
func (m *MockSvc) Register(c echo.Context, user entity.RegisterBinding) (*entity.RegisterView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", c, user)
	ret0, _ := ret[0].(*entity.RegisterView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockSvcMockRecorder) Register(c, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockSvc)(nil).Register), c, user)
}

// SendEmailForgotPassword mocks base method.
func (m *MockSvc) SendEmailForgotPassword(c echo.Context, email entity.ForgotPasswordBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailForgotPassword", c, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmailForgotPassword indicates an expected call of SendEmailForgotPassword.
func (mr *MockSvcMockRecorder) SendEmailForgotPassword(c, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailForgotPassword", reflect.TypeOf((*MockSvc)(nil).SendEmailForgotPassword), c, email)
}

// UpdateOneById mocks base method.
func (m *MockSvc) UpdateOneById(c echo.Context, ID string, user entity.UpdateUserBinding) (*entity.UsersView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneById", c, ID, user)
	ret0, _ := ret[0].(*entity.UsersView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOneById indicates an expected call of UpdateOneById.
func (mr *MockSvcMockRecorder) UpdateOneById(c, ID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneById", reflect.TypeOf((*MockSvc)(nil).UpdateOneById), c, ID, user)
}

// UpdateProduct mocks base method.
func (m *MockSvc) UpdateProduct(c echo.Context, ID string, product *entity.Products) (*entity.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", c, ID, product)
	ret0, _ := ret[0].(*entity.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockSvcMockRecorder) UpdateProduct(c, ID, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockSvc)(nil).UpdateProduct), c, ID, product)
}

// UpdateTransactionByAdmin mocks base method.
func (m *MockSvc) UpdateTransactionByAdmin(c echo.Context, ID string, transaction entity.UpdateTransactionBinding) (*entity.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionByAdmin", c, ID, transaction)
	ret0, _ := ret[0].(*entity.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransactionByAdmin indicates an expected call of UpdateTransactionByAdmin.
func (mr *MockSvcMockRecorder) UpdateTransactionByAdmin(c, ID, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionByAdmin", reflect.TypeOf((*MockSvc)(nil).UpdateTransactionByAdmin), c, ID, transaction)
}

// MockauthSvc is a mock of authSvc interface.
type MockauthSvc struct {
	ctrl     *gomock.Controller
	recorder *MockauthSvcMockRecorder
}

// MockauthSvcMockRecorder is the mock recorder for MockauthSvc.
type MockauthSvcMockRecorder struct {
	mock *MockauthSvc
}

// NewMockauthSvc creates a new mock instance.
func NewMockauthSvc(ctrl *gomock.Controller) *MockauthSvc {
	mock := &MockauthSvc{ctrl: ctrl}
	mock.recorder = &MockauthSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockauthSvc) EXPECT() *MockauthSvcMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockauthSvc) Login(c echo.Context, user entity.LoginBinding) (*entity.LoginView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", c, user)
	ret0, _ := ret[0].(*entity.LoginView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockauthSvcMockRecorder) Login(c, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockauthSvc)(nil).Login), c, user)
}

// ReGenerateToken mocks base method.
func (m *MockauthSvc) ReGenerateToken(c echo.Context, refreshToken entity.TokenBinding) (*entity.RefreshTokenView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReGenerateToken", c, refreshToken)
	ret0, _ := ret[0].(*entity.RefreshTokenView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReGenerateToken indicates an expected call of ReGenerateToken.
func (mr *MockauthSvcMockRecorder) ReGenerateToken(c, refreshToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReGenerateToken", reflect.TypeOf((*MockauthSvc)(nil).ReGenerateToken), c, refreshToken)
}

// Register mocks base method.
func (m *MockauthSvc) Register(c echo.Context, user entity.RegisterBinding) (*entity.RegisterView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", c, user)
	ret0, _ := ret[0].(*entity.RegisterView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockauthSvcMockRecorder) Register(c, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockauthSvc)(nil).Register), c, user)
}

// MockproductSvc is a mock of productSvc interface.
type MockproductSvc struct {
	ctrl     *gomock.Controller
	recorder *MockproductSvcMockRecorder
}

// MockproductSvcMockRecorder is the mock recorder for MockproductSvc.
type MockproductSvcMockRecorder struct {
	mock *MockproductSvc
}

// NewMockproductSvc creates a new mock instance.
func NewMockproductSvc(ctrl *gomock.Controller) *MockproductSvc {
	mock := &MockproductSvc{ctrl: ctrl}
	mock.recorder = &MockproductSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproductSvc) EXPECT() *MockproductSvcMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockproductSvc) CreateProduct(c echo.Context, product *entity.Products) (*entity.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", c, product)
	ret0, _ := ret[0].(*entity.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockproductSvcMockRecorder) CreateProduct(c, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockproductSvc)(nil).CreateProduct), c, product)
}

// DeleteProduct mocks base method.
func (m *MockproductSvc) DeleteProduct(c echo.Context, ID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", c, ID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockproductSvcMockRecorder) DeleteProduct(c, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockproductSvc)(nil).DeleteProduct), c, ID)
}

// GetProductByID mocks base method.
func (m *MockproductSvc) GetProductByID(c echo.Context, ID string) (*entity.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", c, ID)
	ret0, _ := ret[0].(*entity.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockproductSvcMockRecorder) GetProductByID(c, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockproductSvc)(nil).GetProductByID), c, ID)
}

// GetProducts mocks base method.
func (m *MockproductSvc) GetProducts(c echo.Context) ([]entity.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProducts", c)
	ret0, _ := ret[0].([]entity.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProducts indicates an expected call of GetProducts.
func (mr *MockproductSvcMockRecorder) GetProducts(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProducts", reflect.TypeOf((*MockproductSvc)(nil).GetProducts), c)
}

// GetProductsByCategory mocks base method.
func (m *MockproductSvc) GetProductsByCategory(c echo.Context, category string) ([]entity.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByCategory", c, category)
	ret0, _ := ret[0].([]entity.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByCategory indicates an expected call of GetProductsByCategory.
func (mr *MockproductSvcMockRecorder) GetProductsByCategory(c, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByCategory", reflect.TypeOf((*MockproductSvc)(nil).GetProductsByCategory), c, category)
}

// GetProductsByMethod mocks base method.
func (m *MockproductSvc) GetProductsByMethod(c echo.Context, paymentMethod string) ([]entity.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsByMethod", c, paymentMethod)
	ret0, _ := ret[0].([]entity.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsByMethod indicates an expected call of GetProductsByMethod.
func (mr *MockproductSvcMockRecorder) GetProductsByMethod(c, paymentMethod interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsByMethod", reflect.TypeOf((*MockproductSvc)(nil).GetProductsByMethod), c, paymentMethod)
}

// UpdateProduct mocks base method.
func (m *MockproductSvc) UpdateProduct(c echo.Context, ID string, product *entity.Products) (*entity.Products, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", c, ID, product)
	ret0, _ := ret[0].(*entity.Products)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockproductSvcMockRecorder) UpdateProduct(c, ID, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockproductSvc)(nil).UpdateProduct), c, ID, product)
}

// MocktrasanctionSvc is a mock of trasanctionSvc interface.
type MocktrasanctionSvc struct {
	ctrl     *gomock.Controller
	recorder *MocktrasanctionSvcMockRecorder
}

// MocktrasanctionSvcMockRecorder is the mock recorder for MocktrasanctionSvc.
type MocktrasanctionSvcMockRecorder struct {
	mock *MocktrasanctionSvc
}

// NewMocktrasanctionSvc creates a new mock instance.
func NewMocktrasanctionSvc(ctrl *gomock.Controller) *MocktrasanctionSvc {
	mock := &MocktrasanctionSvc{ctrl: ctrl}
	mock.recorder = &MocktrasanctionSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktrasanctionSvc) EXPECT() *MocktrasanctionSvcMockRecorder {
	return m.recorder
}

// CreateMidtransTransaction mocks base method.
func (m *MocktrasanctionSvc) CreateMidtransTransaction(c echo.Context, transaction entity.MidtransTransactionBinding) (*entity.MidtransTransactionView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMidtransTransaction", c, transaction)
	ret0, _ := ret[0].(*entity.MidtransTransactionView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMidtransTransaction indicates an expected call of CreateMidtransTransaction.
func (mr *MocktrasanctionSvcMockRecorder) CreateMidtransTransaction(c, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMidtransTransaction", reflect.TypeOf((*MocktrasanctionSvc)(nil).CreateMidtransTransaction), c, transaction)
}

// CreateTransactionByAdmin mocks base method.
func (m *MocktrasanctionSvc) CreateTransactionByAdmin(c echo.Context, transaction entity.Transactions) (*entity.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransactionByAdmin", c, transaction)
	ret0, _ := ret[0].(*entity.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransactionByAdmin indicates an expected call of CreateTransactionByAdmin.
func (mr *MocktrasanctionSvcMockRecorder) CreateTransactionByAdmin(c, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransactionByAdmin", reflect.TypeOf((*MocktrasanctionSvc)(nil).CreateTransactionByAdmin), c, transaction)
}

// CreateTransactionByUser mocks base method.
func (m *MocktrasanctionSvc) CreateTransactionByUser(c echo.Context, transaction entity.TransactionsBinding) (*entity.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransactionByUser", c, transaction)
	ret0, _ := ret[0].(*entity.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransactionByUser indicates an expected call of CreateTransactionByUser.
func (mr *MocktrasanctionSvcMockRecorder) CreateTransactionByUser(c, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransactionByUser", reflect.TypeOf((*MocktrasanctionSvc)(nil).CreateTransactionByUser), c, transaction)
}

// DeleteTransactionByAdmin mocks base method.
func (m *MocktrasanctionSvc) DeleteTransactionByAdmin(c echo.Context, transactionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransactionByAdmin", c, transactionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransactionByAdmin indicates an expected call of DeleteTransactionByAdmin.
func (mr *MocktrasanctionSvcMockRecorder) DeleteTransactionByAdmin(c, transactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransactionByAdmin", reflect.TypeOf((*MocktrasanctionSvc)(nil).DeleteTransactionByAdmin), c, transactionID)
}

// GetCountTransactions mocks base method.
func (m *MocktrasanctionSvc) GetCountTransactions(c echo.Context) (*entity.GetTransactionsCountView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountTransactions", c)
	ret0, _ := ret[0].(*entity.GetTransactionsCountView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountTransactions indicates an expected call of GetCountTransactions.
func (mr *MocktrasanctionSvcMockRecorder) GetCountTransactions(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountTransactions", reflect.TypeOf((*MocktrasanctionSvc)(nil).GetCountTransactions), c)
}

// GetHistory mocks base method.
func (m *MocktrasanctionSvc) GetHistory(c echo.Context) ([]entity.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistory", c)
	ret0, _ := ret[0].([]entity.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistory indicates an expected call of GetHistory.
func (mr *MocktrasanctionSvcMockRecorder) GetHistory(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistory", reflect.TypeOf((*MocktrasanctionSvc)(nil).GetHistory), c)
}

// GetHistoryByMethod mocks base method.
func (m *MocktrasanctionSvc) GetHistoryByMethod(c echo.Context, method string) ([]entity.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryByMethod", c, method)
	ret0, _ := ret[0].([]entity.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryByMethod indicates an expected call of GetHistoryByMethod.
func (mr *MocktrasanctionSvcMockRecorder) GetHistoryByMethod(c, method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryByMethod", reflect.TypeOf((*MocktrasanctionSvc)(nil).GetHistoryByMethod), c, method)
}

// GetHistoryByMethodCategory mocks base method.
func (m *MocktrasanctionSvc) GetHistoryByMethodCategory(c echo.Context, method, category string) ([]entity.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryByMethodCategory", c, method, category)
	ret0, _ := ret[0].([]entity.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryByMethodCategory indicates an expected call of GetHistoryByMethodCategory.
func (mr *MocktrasanctionSvcMockRecorder) GetHistoryByMethodCategory(c, method, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryByMethodCategory", reflect.TypeOf((*MocktrasanctionSvc)(nil).GetHistoryByMethodCategory), c, method, category)
}

// GetTransactionByID mocks base method.
func (m *MocktrasanctionSvc) GetTransactionByID(c echo.Context, ID string) (*entity.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByID", c, ID)
	ret0, _ := ret[0].(*entity.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByID indicates an expected call of GetTransactionByID.
func (mr *MocktrasanctionSvcMockRecorder) GetTransactionByID(c, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByID", reflect.TypeOf((*MocktrasanctionSvc)(nil).GetTransactionByID), c, ID)
}

// GetTransactions mocks base method.
func (m *MocktrasanctionSvc) GetTransactions(c echo.Context) ([]entity.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", c)
	ret0, _ := ret[0].([]entity.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MocktrasanctionSvcMockRecorder) GetTransactions(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MocktrasanctionSvc)(nil).GetTransactions), c)
}

// GetTransactionsByMethod mocks base method.
func (m *MocktrasanctionSvc) GetTransactionsByMethod(c echo.Context, method string) ([]entity.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByMethod", c, method)
	ret0, _ := ret[0].([]entity.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByMethod indicates an expected call of GetTransactionsByMethod.
func (mr *MocktrasanctionSvcMockRecorder) GetTransactionsByMethod(c, method interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByMethod", reflect.TypeOf((*MocktrasanctionSvc)(nil).GetTransactionsByMethod), c, method)
}

// UpdateTransactionByAdmin mocks base method.
func (m *MocktrasanctionSvc) UpdateTransactionByAdmin(c echo.Context, ID string, transaction entity.UpdateTransactionBinding) (*entity.TransactionsView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTransactionByAdmin", c, ID, transaction)
	ret0, _ := ret[0].(*entity.TransactionsView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTransactionByAdmin indicates an expected call of UpdateTransactionByAdmin.
func (mr *MocktrasanctionSvcMockRecorder) UpdateTransactionByAdmin(c, ID, transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTransactionByAdmin", reflect.TypeOf((*MocktrasanctionSvc)(nil).UpdateTransactionByAdmin), c, ID, transaction)
}

// MockuserSvc is a mock of userSvc interface.
type MockuserSvc struct {
	ctrl     *gomock.Controller
	recorder *MockuserSvcMockRecorder
}

// MockuserSvcMockRecorder is the mock recorder for MockuserSvc.
type MockuserSvcMockRecorder struct {
	mock *MockuserSvc
}

// NewMockuserSvc creates a new mock instance.
func NewMockuserSvc(ctrl *gomock.Controller) *MockuserSvc {
	mock := &MockuserSvc{ctrl: ctrl}
	mock.recorder = &MockuserSvcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockuserSvc) EXPECT() *MockuserSvcMockRecorder {
	return m.recorder
}

// CreateUserByAdmin mocks base method.
func (m *MockuserSvc) CreateUserByAdmin(c echo.Context, user entity.CreateUserBinding) (*entity.CreateUserView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserByAdmin", c, user)
	ret0, _ := ret[0].(*entity.CreateUserView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserByAdmin indicates an expected call of CreateUserByAdmin.
func (mr *MockuserSvcMockRecorder) CreateUserByAdmin(c, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserByAdmin", reflect.TypeOf((*MockuserSvc)(nil).CreateUserByAdmin), c, user)
}

// DeleteOneById mocks base method.
func (m *MockuserSvc) DeleteOneById(c echo.Context, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneById", c, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneById indicates an expected call of DeleteOneById.
func (mr *MockuserSvcMockRecorder) DeleteOneById(c, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneById", reflect.TypeOf((*MockuserSvc)(nil).DeleteOneById), c, userId)
}

// GetCountUsers mocks base method.
func (m *MockuserSvc) GetCountUsers(c echo.Context) (*entity.GetUserCountView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountUsers", c)
	ret0, _ := ret[0].(*entity.GetUserCountView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountUsers indicates an expected call of GetCountUsers.
func (mr *MockuserSvcMockRecorder) GetCountUsers(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountUsers", reflect.TypeOf((*MockuserSvc)(nil).GetCountUsers), c)
}

// GetUserById mocks base method.
func (m *MockuserSvc) GetUserById(c echo.Context, ID string) (*entity.UsersView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", c, ID)
	ret0, _ := ret[0].(*entity.UsersView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockuserSvcMockRecorder) GetUserById(c, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockuserSvc)(nil).GetUserById), c, ID)
}

// GetUsersPagination mocks base method.
func (m *MockuserSvc) GetUsersPagination(c echo.Context) ([]entity.UsersView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersPagination", c)
	ret0, _ := ret[0].([]entity.UsersView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersPagination indicates an expected call of GetUsersPagination.
func (mr *MockuserSvcMockRecorder) GetUsersPagination(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersPagination", reflect.TypeOf((*MockuserSvc)(nil).GetUsersPagination), c)
}

// SendEmailForgotPassword mocks base method.
func (m *MockuserSvc) SendEmailForgotPassword(c echo.Context, email entity.ForgotPasswordBinding) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailForgotPassword", c, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmailForgotPassword indicates an expected call of SendEmailForgotPassword.
func (mr *MockuserSvcMockRecorder) SendEmailForgotPassword(c, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailForgotPassword", reflect.TypeOf((*MockuserSvc)(nil).SendEmailForgotPassword), c, email)
}

// UpdateOneById mocks base method.
func (m *MockuserSvc) UpdateOneById(c echo.Context, ID string, user entity.UpdateUserBinding) (*entity.UsersView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneById", c, ID, user)
	ret0, _ := ret[0].(*entity.UsersView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOneById indicates an expected call of UpdateOneById.
func (mr *MockuserSvcMockRecorder) UpdateOneById(c, ID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneById", reflect.TypeOf((*MockuserSvc)(nil).UpdateOneById), c, ID, user)
}
