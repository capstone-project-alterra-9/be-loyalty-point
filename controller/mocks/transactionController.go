// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// transactionController is an autogenerated mock type for the transactionController type
type transactionController struct {
	mock.Mock
}

// CreateMidtransTransaction provides a mock function with given fields: c
func (_m *transactionController) CreateMidtransTransaction(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTransactionByAdmin provides a mock function with given fields: c
func (_m *transactionController) CreateTransactionByAdmin(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateTransactionByUser provides a mock function with given fields: c
func (_m *transactionController) CreateTransactionByUser(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTransactionByAdmin provides a mock function with given fields: c
func (_m *transactionController) DeleteTransactionByAdmin(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCountTransactions provides a mock function with given fields: c
func (_m *transactionController) GetCountTransactions(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHistory provides a mock function with given fields: c
func (_m *transactionController) GetHistory(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHistoryByMethod provides a mock function with given fields: c
func (_m *transactionController) GetHistoryByMethod(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetHistoryByMethodCategory provides a mock function with given fields: c
func (_m *transactionController) GetHistoryByMethodCategory(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransactionByID provides a mock function with given fields: c
func (_m *transactionController) GetTransactionByID(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransactions provides a mock function with given fields: c
func (_m *transactionController) GetTransactions(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTransactionsByMethod provides a mock function with given fields: c
func (_m *transactionController) GetTransactionsByMethod(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransactionByAdmin provides a mock function with given fields: c
func (_m *transactionController) UpdateTransactionByAdmin(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewTransactionController interface {
	mock.TestingT
	Cleanup(func())
}

// newTransactionController creates a new instance of transactionController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newTransactionController(t mockConstructorTestingTnewTransactionController) *transactionController {
	mock := &transactionController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
