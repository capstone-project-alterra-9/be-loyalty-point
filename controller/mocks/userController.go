// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	echo "github.com/labstack/echo/v4"
	mock "github.com/stretchr/testify/mock"
)

// userController is an autogenerated mock type for the userController type
type userController struct {
	mock.Mock
}

// DeleteOneById provides a mock function with given fields: c
func (_m *userController) DeleteOneById(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCountUsers provides a mock function with given fields: c
func (_m *userController) GetCountUsers(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetForgotPassword provides a mock function with given fields: c
func (_m *userController) GetForgotPassword(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOneByUserId provides a mock function with given fields: c
func (_m *userController) GetOneByUserId(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUsersPagination provides a mock function with given fields: c
func (_m *userController) GetUsersPagination(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOneByUserId provides a mock function with given fields: c
func (_m *userController) UpdateOneByUserId(c echo.Context) error {
	ret := _m.Called(c)

	var r0 error
	if rf, ok := ret.Get(0).(func(echo.Context) error); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTnewUserController interface {
	mock.TestingT
	Cleanup(func())
}

// newUserController creates a new instance of userController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newUserController(t mockConstructorTestingTnewUserController) *userController {
	mock := &userController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
